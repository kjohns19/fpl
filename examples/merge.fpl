mergesort arr left right cmp ms_fun m_fun 6 fun
    size right left - =
    size 0 == then
        obj exit
    end
    size 1 == then
        res obj =
        res.0 arr deref left at =
        res exit
    end
    mid size 2 / left + =
    left_sorted arr left mid cmp ms_fun m_fun ms_fun deref call =
    right_sorted arr mid right cmp ms_fun m_fun ms_fun deref call =
    left_sorted ref mid left - right_sorted ref right mid - cmp m_fun deref call
end =

merge left left_size right right_size cmp 5 fun
    result obj =
    i 0 =
    j 0 =
    k 0 =

    j left_size < k right_size < && while
        left deref j at right deref k at cmp deref call then
            result i at left deref j at =
            j j 1 + =
        else
            result i at right deref k at =
            k k 1 + =
        end
        i i 1 + =
    end

    j left_size < while
        result i at left deref j at =
        j j 1 + =
        i i 1 + =
    end

    k right_size < while
        result i at right deref k at =
        k k 1 + =
        i i 1 + =
    end
    result
end =

arr obj =

size 100 =
i 0 =
i size < while
    arr i at 0 100 rand =
    i i 1 + =
end

"Start:" put
i 0 =
i size < while
    arr i at put
    i i 1 + =
end

cmp a b 2 fun
    a b <
end =

sorted arr ref 0 size cmp ref mergesort ref merge ref mergesort call =

"\nSorted:" put
i 0 =
i size < while
    sorted i at put
    i i 1 + =
end
